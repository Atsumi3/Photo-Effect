package info.nukoneko.android.photoeffect.controller.main;import android.app.Notification;import android.app.NotificationManager;import android.app.PendingIntent;import android.content.Context;import android.content.Intent;import android.graphics.Bitmap;import android.graphics.Matrix;import android.graphics.Point;import android.graphics.PointF;import android.media.ExifInterface;import android.net.Uri;import android.opengl.GLSurfaceView;import android.support.annotation.NonNull;import android.support.annotation.Nullable;import android.support.annotation.StringRes;import android.support.v4.app.NotificationCompat;import android.support.v4.app.TaskStackBuilder;import android.support.v7.app.AlertDialog;import android.support.v7.widget.LinearLayoutCompat;import android.util.Log;import android.view.MotionEvent;import android.view.View;import android.view.ViewGroup;import android.view.animation.AnimationUtils;import android.widget.EditText;import android.widget.LinearLayout;import android.widget.SeekBar;import android.widget.Toast;import java.io.ByteArrayInputStream;import java.io.ByteArrayOutputStream;import info.nukoneko.android.photoeffect.R;import info.nukoneko.android.photoeffect.controller.common.view.FilterButton;import info.nukoneko.android.photoeffect.controller.twitter.TwitterOAuthActivity;import info.nukoneko.android.photoeffect.sys.NKAppController;import info.nukoneko.android.photoeffect.sys.enm.NKFilterType;import info.nukoneko.android.photoeffect.sys.util.rx.RxWrap;import info.nukoneko.android.photoeffect.sys.util.twitter.TwitterUtils;import jp.co.cyberagent.android.gpuimage.GPUImage;import jp.co.cyberagent.android.gpuimage.GPUImageFilter;import rx.Observable;import twitter4j.StatusUpdate;import twitter4j.Twitter;import twitter4j.UploadedMedia;/** * Created by Atsumi3 on 2016/11/12. */public final class MainActivityViewModel        implements SeekBar.OnSeekBarChangeListener, FilterButton.OnClickFilterButtonListener {    private final static int SEEK_BAR_MAX_VALUE = 500;    @SuppressWarnings("FieldCanBeLocal")    private final NKFilterType[] FILTER_TYPE = {            NKFilterType.Normal,            NKFilterType.AlphaBlend,            NKFilterType.Emboss,            NKFilterType.Dilation,            NKFilterType.Bilateral,            NKFilterType.Brightness,            NKFilterType.BulgeDistortion,            NKFilterType.Contrast,            NKFilterType.Crosshatch,            NKFilterType.DirectionalSobelEdge,            NKFilterType.Exposure,            NKFilterType.Gamma,            NKFilterType.GaussianBlur,            NKFilterType.Grayscale,            NKFilterType.Halftone,            NKFilterType.Haze,            NKFilterType.HighLightShadow,            NKFilterType.Kuwahara,            NKFilterType.Laplacian,            NKFilterType.Levels,            NKFilterType.Lookup,            NKFilterType.Opacity,            NKFilterType.Pixelation,            NKFilterType.SaturationBlend,            NKFilterType.Sepia,            NKFilterType.Sharpen,            NKFilterType.SobelEdge,            NKFilterType.SobelThreshold,            NKFilterType.ThresholdEdge    };    private final MainActivity activity;    @Nullable private FilterButton currentSelectedButton;    private GPUImage gpuImage;    private PointF touchPoint = new PointF();    MainActivityViewModel(MainActivity activity) {        this.activity = activity;        this.gpuImage = new GPUImage(activity);        this.gpuImage.setGLSurfaceView(this.activity.getBinding().imageView);        this.activity.getBinding().imageView.setClickable(true);        final LinearLayoutCompat.LayoutParams btnLayoutParams =                new LinearLayoutCompat.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.MATCH_PARENT);        Observable.from(FILTER_TYPE).forEach(filterType -> {            FilterButton btn = new FilterButton(activity, filterType, this);            btn.setLayoutParams(btnLayoutParams);            activity.getBinding().buttonPanel.addView(btn);        });    }    /**     * 画像をセットします     * @param bitmap 画像データ     */    void setImageUri(@NonNull Uri bitmapUri, @Nullable Bitmap bitmap) {        RxWrap.create(() -> {            Bitmap bmp = validateBitmap(bitmapUri, bitmap);            gpuImage.setImage(bmp);            return null;        }).subscribe(o -> {            Toast.makeText(activity, R.string.success_load, Toast.LENGTH_SHORT).show();        }, throwable -> {            gpuImage.deleteImage();            throwable.printStackTrace();            Toast.makeText(activity, R.string.failed_load, Toast.LENGTH_SHORT).show();        });    }    @Nullable    private Bitmap validateBitmap(@NonNull Uri bitmapUri, @Nullable Bitmap bitmap) throws Exception {        if (bitmap == null) return null;        ExifInterface exif= new ExifInterface(bitmapUri.getPath());        Matrix matrix = new Matrix();        int orientation = exif.getAttributeInt(ExifInterface.TAG_ORIENTATION, ExifInterface.ORIENTATION_NORMAL);        if (orientation == 6) {            matrix.postRotate(90);        } else if (orientation == 3) {            matrix.postRotate(180);        } else if (orientation == 8) {            matrix.postRotate(270);        } else {            matrix.postRotate(0);        }        return Bitmap.createBitmap(bitmap, 0, 0, bitmap.getWidth(), bitmap.getHeight(), matrix, true);    }    /**     * 画像を押したときの処理     * @param view View     */    @SuppressWarnings("UnusedParameters")    public void onClickImageView(View view) {//        View overLayout = activity.getBinding().overLayout;//        if (overLayout.getVisibility() == View.GONE) {//            overLayout.setAnimation(AnimationUtils.loadAnimation(activity, R.anim.in_anim));//            overLayout.setVisibility(View.VISIBLE);//        } else {//            overLayout.startAnimation(AnimationUtils.loadAnimation(activity, R.anim.out_anim));//            overLayout.setVisibility(View.GONE);//        }    }    /**     * 上部の画像読み込みボタンを押した時の処理     * @param view View     */    @SuppressWarnings("UnusedParameters")    public void onClickLoadImage(View view) {        final String[] str_items = {                activity.getString(R.string.load_camera),                activity.getString(R.string.load_gallery),                activity.getString(R.string.cancel)        };        new AlertDialog.Builder(activity)                .setTitle(R.string.load_image)                .setItems(str_items, (dialog, which) -> {                    if (str_items.length > which && which > -1) {                        switch (which) {                            case 0:                                activity.openCamera();                                break;                            case 1:                                activity.openGallery();                                break;                            default:                                break;                        }                    }                }).show();    }    /**     * 上部のツイートボタンを押した時の処理     * @param view View     */    @SuppressWarnings("UnusedParameters")    public void onClickTweet(View view) {        Toast.makeText(activity, R.string.dead, Toast.LENGTH_SHORT).show();        // GLSurfaceViewの実装が終わるまでツイート無し//        final String[] items = {//                activity.getString(R.string.tweet_ok),//                activity.getString(R.string.twitter_account_reauth),//                activity.getString(R.string.cancel)//        };//        new AlertDialog.Builder(activity)//                .setTitle(R.string.twitter_menu)//                .setItems(items, (dialog, which) -> {//                    if (items.length > which && which > -1) {//                        switch (which) {//                            case 0://                                tweetDialog();//                                break;//                            case 1://                                TwitterUtils.deleteToken(activity);//                                TwitterOAuthActivity.createInstance(activity);//                                break;//                            default://                                break;//                        }//                    }//                }).show();    }    /**     * 画像エフェクトを更新する     */    private void updateEffect() {        if (currentSelectedButton == null) return;//        activity.getBinding().value.setText(String.format(Locale.getDefault(), "%f", val));        NKFilterType filterType = currentSelectedButton.getNKFilterType();        activity.getBinding().filterName.setText(String.format("%s", filterType.getFilterName()));        GPUImageFilter filter = filterType.getFilter(getSeekBarValue(0), getSeekBarValue(1), touchPoint);        if (filter == null) {            gpuImage.setFilter(new GPUImageFilter());        } else {            gpuImage.setFilter(filter);        }    }    /**     * 通知バーにお知らせを表示する     * @param titleRes 通知タイトル     * @param textRes 通知内容     * @param id 通知のID     */    private void showNotification(@StringRes int titleRes, @StringRes int textRes, int id) {        final String text = activity.getString(textRes);        NotificationCompat.Builder builder =                new NotificationCompat.Builder(activity)                        .setSmallIcon(R.drawable.ic_launcher)                        .setContentTitle(activity.getString(titleRes))                        .setContentText(text);        Intent intent = new Intent(activity, MainActivity.class);        TaskStackBuilder stackBuilder = TaskStackBuilder.create(activity);        stackBuilder.addParentStack(MainActivity.class);        stackBuilder.addNextIntent(intent);        PendingIntent resultPendingIntent = stackBuilder.getPendingIntent(0, PendingIntent.FLAG_UPDATE_CURRENT);        builder.setContentIntent(resultPendingIntent);        builder.setTicker(text);        builder.setDefaults(Notification.DEFAULT_VIBRATE);        NotificationManager mNotificationManager = (NotificationManager) activity.getSystemService(Context.NOTIFICATION_SERVICE);        mNotificationManager.notify(id, builder.build());    }    /**     * ツイートする     * @param tweetText ツイート     */    private void tweet(String tweetText) {        final int notificationId = 1;        Twitter twitterInstance = TwitterUtils.getTwitterInstance(activity);        RxWrap.create(activity.bindToLifecycle(), () -> {            final StatusUpdate statusUpdate = new StatusUpdate(tweetText);            UploadedMedia media = RxWrap.create(() -> {                ByteArrayOutputStream stream = new ByteArrayOutputStream();//                activity.getBinding().imageView.capture().compress(Bitmap.CompressFormat.PNG, 0, stream);                ByteArrayInputStream bis = new ByteArrayInputStream(stream.toByteArray());                UploadedMedia _media = twitterInstance.uploadMedia("f", bis);                bis.close();                stream.close();                return _media;            }).toBlocking().single();            statusUpdate.setMediaIds(media.getMediaId());            return twitterInstance.updateStatus(statusUpdate);        }).doOnSubscribe(() -> showNotification(R.string.tweet_result, R.string.tweeting, notificationId)).doOnCompleted(() -> {            NotificationManager notificationManager =                    (NotificationManager) activity.getSystemService(Context.NOTIFICATION_SERVICE);            notificationManager.cancel(notificationId);        }).subscribe(status -> {            showNotification(R.string.tweet_result, R.string.tweet_success, notificationId);        }, throwable -> {            throwable.printStackTrace();            showNotification(R.string.tweet_result, R.string.tweet_failed, notificationId);        });    }    /**     * Tweetをするダイアログ     */    @SuppressWarnings("unused")    private void tweetDialog(){        AlertDialog.Builder builder = new AlertDialog.Builder(activity);        // 認証済みだったら        if (TwitterUtils.hasAccessToken(activity)) {            final EditText editText = new EditText(activity);            builder                    .setTitle(R.string.tweet_body)                    .setView(editText)                    .setPositiveButton(R.string.tweet_send, (dialog, which) -> tweet(editText.getText().toString()))                    .setNegativeButton(R.string.cancel, null);        } else {            builder                    .setTitle(R.string.no_set_account)                    .setPositiveButton(R.string.twitter_auth, (dialog, which) -> TwitterOAuthActivity.createInstance(activity))                    .setNegativeButton(R.string.cancel, null);        }        builder.create().show();    }    /** OnSeekBarChangeListener **/    @Override    public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) {        updateEffect();    }    @Override    public void onStartTrackingTouch(SeekBar seekBar) {    }    @Override    public void onStopTrackingTouch(SeekBar seekBar) {    }    /** OnClickFilterButtonListener **/    @Override    public void onClickFilterButton(FilterButton filterButton) {        currentSelectedButton = filterButton;        switch (filterButton.getNKFilterType().getArgumentType()) {            case SINGLE: updateSeekBarViews(1); break;            case DOUBLE: updateSeekBarViews(2); break;            case DOUBLE_WITH_POINT: updateSeekBarViews(2); break;            default: updateSeekBarViews(0); break;        }        updateEffect();    }    private void updateSeekBarViews(int addCount) {        activity.getBinding().seekPanel.removeAllViews();        for (int i = 0; i < addCount; i++) {            SeekBar seekBar = new SeekBar(activity);            seekBar.setMax(SEEK_BAR_MAX_VALUE);            seekBar.setOnSeekBarChangeListener(this);            seekBar.setTag(i);            if (addCount == 1) seekBar.setProgress(SEEK_BAR_MAX_VALUE / 2);            if (addCount == 2) {                switch (i) {                    case 0:                        seekBar.setProgress(SEEK_BAR_MAX_VALUE / 4); break;                    case 1:                        seekBar.setProgress(SEEK_BAR_MAX_VALUE / 4 * 3); break;                    default:                        seekBar.setProgress(SEEK_BAR_MAX_VALUE / 2);                }            }            activity.getBinding().seekPanel.addView(seekBar);        }    }    private float getSeekBarValue(int number) {        SeekBar seekBar = null;        LinearLayout ll = activity.getBinding().seekPanel;        for (int i = 0; i < ll.getChildCount(); i++) {            View view = ll.getChildAt(i);            if (view instanceof SeekBar && view.getTag().equals(number)) {                seekBar = (SeekBar) view;                break;            }        }        if (seekBar == null) {            return 0;        } else  {            return seekBar.getProgress() / (float)SEEK_BAR_MAX_VALUE;        }    }    void onTouchEvent(MotionEvent event) {        Point p = NKAppController.getApp().getWindowSize();        float divX = (float)p.x / (float)SEEK_BAR_MAX_VALUE;        float divY = (float)p.y / (float)SEEK_BAR_MAX_VALUE;        touchPoint = new PointF(                event.getX() / divX / SEEK_BAR_MAX_VALUE,                event.getY() / divY / SEEK_BAR_MAX_VALUE);        Log.d("GetPosition", touchPoint.toString());        updateEffect();    }}