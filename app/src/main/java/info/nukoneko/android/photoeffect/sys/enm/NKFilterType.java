package info.nukoneko.android.photoeffect.sys.enm;import android.graphics.Point;import android.graphics.PointF;import android.support.annotation.Nullable;import android.util.Log;import jp.co.cyberagent.android.gpuimage.GPUImageAlphaBlendFilter;import jp.co.cyberagent.android.gpuimage.GPUImageBilateralFilter;import jp.co.cyberagent.android.gpuimage.GPUImageBrightnessFilter;import jp.co.cyberagent.android.gpuimage.GPUImageBulgeDistortionFilter;import jp.co.cyberagent.android.gpuimage.GPUImageContrastFilter;import jp.co.cyberagent.android.gpuimage.GPUImageCrosshatchFilter;import jp.co.cyberagent.android.gpuimage.GPUImageDilationFilter;import jp.co.cyberagent.android.gpuimage.GPUImageDirectionalSobelEdgeDetectionFilter;import jp.co.cyberagent.android.gpuimage.GPUImageEmbossFilter;import jp.co.cyberagent.android.gpuimage.GPUImageExposureFilter;import jp.co.cyberagent.android.gpuimage.GPUImageFilter;import jp.co.cyberagent.android.gpuimage.GPUImageGammaFilter;import jp.co.cyberagent.android.gpuimage.GPUImageGaussianBlurFilter;import jp.co.cyberagent.android.gpuimage.GPUImageGrayscaleFilter;import jp.co.cyberagent.android.gpuimage.GPUImageHalftoneFilter;import jp.co.cyberagent.android.gpuimage.GPUImageHazeFilter;import jp.co.cyberagent.android.gpuimage.GPUImageHighlightShadowFilter;import jp.co.cyberagent.android.gpuimage.GPUImageKuwaharaFilter;import jp.co.cyberagent.android.gpuimage.GPUImageLaplacianFilter;import jp.co.cyberagent.android.gpuimage.GPUImageLevelsFilter;import jp.co.cyberagent.android.gpuimage.GPUImageLookupFilter;import jp.co.cyberagent.android.gpuimage.GPUImageOpacityFilter;import jp.co.cyberagent.android.gpuimage.GPUImagePixelationFilter;import jp.co.cyberagent.android.gpuimage.GPUImageSaturationBlendFilter;import jp.co.cyberagent.android.gpuimage.GPUImageSepiaFilter;import jp.co.cyberagent.android.gpuimage.GPUImageSharpenFilter;import jp.co.cyberagent.android.gpuimage.GPUImageSobelEdgeDetection;import jp.co.cyberagent.android.gpuimage.GPUImageSobelThresholdFilter;import jp.co.cyberagent.android.gpuimage.GPUImageThresholdEdgeDetection;/** * Created by Atsumi3 on 2016/11/12. */public enum NKFilterType {    Normal("Normal", NKFilterArgumentType.NONE),    Sepia("Sepia", NKFilterArgumentType.SINGLE),    Grayscale("Grayscale", NKFilterArgumentType.NONE),    Sharpen("Sharpen", NKFilterArgumentType.SINGLE),    SobelEdge("SobelEdge", NKFilterArgumentType.NONE),    ThresholdEdge("ThresholdEdge", NKFilterArgumentType.NONE),    DirectionalSobelEdge("DirectionalSobelEdge", NKFilterArgumentType.NONE),    Gamma("Gamma", NKFilterArgumentType.SINGLE),    Brightness("Brightness", NKFilterArgumentType.SINGLE),    BulgeDistortion("BulgeDistortion", NKFilterArgumentType.DOUBLE_WITH_POINT),    Emboss("Emboss", NKFilterArgumentType.SINGLE),    GaussianBlur("GaussianBlur", NKFilterArgumentType.SINGLE),    HighLightShadow("HighLightShadow", NKFilterArgumentType.DOUBLE),    SaturationBlend("SaturationBlend", NKFilterArgumentType.NONE),    Exposure("Exposure", NKFilterArgumentType.SINGLE),    Contrast("Contrast", NKFilterArgumentType.SINGLE),    Opacity("Opacity", NKFilterArgumentType.SINGLE),    SobelThreshold("SobelThreshold", NKFilterArgumentType.SINGLE),    AlphaBlend("AlphaBlend", NKFilterArgumentType.SINGLE),    Bilateral("Bilateral", NKFilterArgumentType.SINGLE),    Crosshatch("Crosshatch", NKFilterArgumentType.DOUBLE),    Dilation("Dilation", NKFilterArgumentType.SINGLE),    Halftone("Halftone", NKFilterArgumentType.SINGLE),    Haze("Haze", NKFilterArgumentType.DOUBLE),    Kuwahara("Kuwahara", NKFilterArgumentType.SINGLE),    Laplacian("Laplacian", NKFilterArgumentType.NONE),    Levels("Levels", NKFilterArgumentType.NONE),    Lookup("Lookup", NKFilterArgumentType.SINGLE),    Pixelation("Pixelation", NKFilterArgumentType.NONE);    private final String filterName;    private final NKFilterArgumentType argumentType;    NKFilterType(String filterName, NKFilterArgumentType argumentType){        this.filterName = filterName;        this.argumentType = argumentType;    }    public String getFilterName() {        return filterName;    }    public NKFilterArgumentType getArgumentType() {        return argumentType;    }    @Nullable    public GPUImageFilter getFilter(float value, float value2, PointF point) {        Log.d("GetFilter", String.format("%f %f x:%f y:%f", value, value2, point.x, point.y));        switch (this) {            case Sepia: return new GPUImageSepiaFilter(value);            case Grayscale: return new GPUImageGrayscaleFilter();            case Sharpen: return new GPUImageSharpenFilter(value);            case SobelEdge: return new GPUImageSobelEdgeDetection();            case ThresholdEdge: return new GPUImageThresholdEdgeDetection();            case DirectionalSobelEdge: return new GPUImageDirectionalSobelEdgeDetectionFilter();            case Gamma: return new GPUImageGammaFilter(value);            case Brightness: return new GPUImageBrightnessFilter(value);            case BulgeDistortion: return new GPUImageBulgeDistortionFilter(value, value2, point);            case Emboss: return new GPUImageEmbossFilter(value);            case GaussianBlur: return new GPUImageGaussianBlurFilter(value);            case HighLightShadow: return new GPUImageHighlightShadowFilter(value, value2);            case SaturationBlend: return new GPUImageSaturationBlendFilter();            case Exposure: return new GPUImageExposureFilter(value);            case Contrast: return new GPUImageContrastFilter(value);            case Opacity: return new GPUImageOpacityFilter(value);            case SobelThreshold: return new GPUImageSobelThresholdFilter(value);            case AlphaBlend: return new GPUImageAlphaBlendFilter(value);            case Bilateral: return new GPUImageBilateralFilter(value);            case Crosshatch: return new GPUImageCrosshatchFilter(value, value2);            case Dilation: return new GPUImageDilationFilter((int) value);            case Halftone: return new GPUImageHalftoneFilter(value);            case Haze: return new GPUImageHazeFilter(value, value2);            case Kuwahara: return new GPUImageKuwaharaFilter((int) value);            case Laplacian: return new GPUImageLaplacianFilter();            case Levels: return new GPUImageLevelsFilter();            case Lookup: return new GPUImageLookupFilter(value);            case Pixelation: return new GPUImagePixelationFilter();            default: return null;        }    }}